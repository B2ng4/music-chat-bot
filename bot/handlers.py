from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message,FSInputFile
from aiogram.filters import Command

from keyboards.accept import keyboard_accept
from keyboards.main import keyboard_main

from models.ModelForm import Form
from models.ModelText2ImageAPI import Text2ImageAPI

from apiRequests.generateVocal import generateVocal
from apiRequests.generateText import generateText

from modules.generateImage import generateImage

import os

router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª!üé§üéß", reply_markup=keyboard_main)
    await msg.answer("–Ø –ø–æ–∫–∞ –µ—â–µ —É—á—É—Å—å –ø–µ—Ç—å, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å. üôè", reply_markup=keyboard_main)

@router.message(lambda message: message.text == "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç üé∂")
async def request_text(msg: Message, state: FSMContext):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç")
    await state.set_state(Form.waiting_for_text)

@router.message(Form.waiting_for_text)
async def generate(msg: Message, state: FSMContext):
    user_text = msg.text
    await state.update_data(user_text=user_text)
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º—Ç üìú\n \n(–ù–∞–ø—Ä–∏–º–µ—Ä: –ú—É–∂—á–∏–Ω–∞ —Å –±—É–Ω—Ç–∞—Ä—Å–∫–∏–º, —Ä–µ–∑–∫–∏–º –¥—É—Ö–æ–º –≤ —Å—Ç–∏–ª–µ –ø–∞–Ω–∫, —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Ç–æ–Ω–æ–º)", parse_mode="Markdown")
    await state.set_state(Form.waiting_for_promt)


@router.message(Form.waiting_for_promt)
async def generate_promt(msg: Message, state: FSMContext):
    user_data = await state.get_data()
    user_text = user_data.get('user_text')
    promt = msg.text
    await msg.answer("–ü–æ–ª—É—á–∏–ª –ø—Ä–æ–º—Ç üëå", parse_mode="Markdown")
    await msg.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–Ø —Å–æ—á–∏–Ω—è—é*...‚öôÔ∏è‚öôÔ∏èÔ∏è‚öôÔ∏è", parse_mode="Markdown")
    voice_file = generateVocal(user_text)
    api_kandinsky = Text2ImageAPI('https://api-key.fusionbrain.ai/',
                                  api_key=os.getenv("api_key"),
                                  secret_key=os.getenv("secret_key"))
    model_id = api_kandinsky.get_model()
    prompt = api_kandinsky.generate("C–æ–∑–¥–∞–π –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–µ—Å–Ω–∏, –µ—ë –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞:", model_id)
    generated_images = api_kandinsky.check_generation(prompt)
    photos = await generateImage(generated_images, msg.from_user.username)
    await msg.answer_voice(voice=FSInputFile(voice_file),caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∫–∞–ª", reply_markup=keyboard_main)
    await msg.answer_photo(photo=photos[0], caption="–í–æ—Ç –≤–∞—à–∞ –æ–±–ª–æ–∂–∫–∞")
    await state.clear()

@router.message(lambda message: message.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è üéπ")
async def request_text(msg: Message):
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç?", parse_mode="Markdown")
    @router.message()
    async def receive_text(msg: Message):
        await msg.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–°–æ—á–∏–Ω—è—é*...‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", parse_mode="Markdown")
        text = msg.text
        genText = f'{generateText(text)}'
        await msg.answer(genText, reply_markup=keyboard_accept)

@router.message(lambda message: message.text == "–ù–µ—Ç! –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π ‚õî")
async def request_text(msg: Message):
    await msg.answer("–•–æ—Ä–æ—à–æ, –ø–æ–Ω—è–ª –≤–∞—Å! üòº\n–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π! üñäÔ∏è", parse_mode="Markdown")
    @router.message()
    async def receive_text(msg: Message):
        text = msg.text
        genText = f'{generateText(text)}'
        await msg.answer(genText, reply_markup=keyboard_accept)

@router.message(lambda message: message.text == "–î–∞, –≤—Å–µ –∫–ª–∞—Å—Å–Ω–æ! üòá")
async def request_text(msg: Message, state: FSMContext):
    await msg.answer("–Ø –ø–æ–∫–∞ –µ—â–µ —É—á—É—Å—å –ø–µ—Ç—å! ü•∫\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –±–æ–ª—å—à–µ üòû")

    await state.set_state(Form.waiting_for_text)
