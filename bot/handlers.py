from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message,FSInputFile,ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from keyboards.keyboards import get_main_keyboard
from keyboards.setLanguage import languagekb
from modules.generateVocal import generateVocal
from models.ModelForm import Form
from models.ModelText2ImageAPI import Text2ImageAPI

import modules.translateText as TF

from modules.generateImage import generateImage
from apiRequests.generateText import generateText
import os


router = Router()

class LanguageState(StatesGroup):
    CHOSENLANGUAGE = State()

@router.message(Command("start"))
async def cmd_start(msg: Message, state: FSMContext):
    await msg.delete()
    await msg.answer("Hello, setup my language!", reply_markup=languagekb)
    await state.set_state(LanguageState.CHOSENLANGUAGE)

@router.message(LanguageState.CHOSENLANGUAGE)
async def choose_language(msg: Message,state: FSMContext):
    if msg.text == "English üá¨üáß":
        lang = 'en'
        await msg.answer(await TF.translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(Lang = lang)
        await start_handler(msg, state)

    elif msg.text in "Russian üá∑üá∫":
        lang = 'ru'
        await msg.answer(await TF.translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(Lang = lang)
        await start_handler(msg, state)

@router.message(LanguageState.CHOSENLANGUAGE)
async def start_handler(msg: Message,state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang')
    await msg.answer(await TF.translation("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª!üé§üéß", lang), reply_markup=get_main_keyboard(lang))
    await state.clear()
    await state.update_data(Lang=lang)

@router.message(lambda message: message.text in ["–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Çüé∂", "I already have textüé∂"])
async def request_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang')
    await msg.answer(await TF.translation("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç", lang))
    await state.update_data(Lang=lang)
    await state.set_state(Form.waiting_for_text)

@router.message(Form.waiting_for_text)
async def generate(msg: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang')
    voice_file = await generateVocal(msg.text)
    await msg.answer(await TF.translation("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–Ø —Å–æ—á–∏–Ω—è—é*...‚öôÔ∏è‚öôÔ∏èÔ∏è‚öôÔ∏è",lang),parse_mode="Markdown")
    await msg.answer_voice(voice=FSInputFile(voice_file),caption= await TF.translation("C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∫–∞–ª",lang))
    await state.update_data(Lang=lang)
    await state.clear()

@router.message(lambda message: message.text in ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—èüéπ", "Generation from scratchüéπ"])
async def request_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang')
    await msg.answer(await TF.translation("–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç?", lang), parse_mode="Markdown")
    await state.update_data(Lang=lang)
    @router.message()
    async def receive_text(msg: Message):
        text = msg.text
        genText = f'{generateText(text)}'
        await msg.answer(genText, parse_mode="Markdown")


@router.message(lambda message: message.text in ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "Generation"])
async def request_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang')
    await msg.answer(await TF.translation("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–Ø —Ç–≤–æ—Ä—é*...‚öôÔ∏è‚öôÔ∏èÔ∏è‚öôÔ∏è", lang), parse_mode="Markdown")

    api_kandinsky = Text2ImageAPI('https://api-key.fusionbrain.ai/',
                                  api_key=os.getenv("api_key"),
                                  secret_key=os.getenv("secret_key"))
    model_id = api_kandinsky.get_model()
    prompt = api_kandinsky.generate("C–æ–∑–¥–∞–π –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–µ—Å–Ω–∏, –µ—ë –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞:", model_id)
    generated_images = api_kandinsky.check_generation(prompt)
    photos = await generateImage(generated_images, msg.from_user.username)
    if photos:
        await msg.answer_photo(photo=photos[0], caption= await TF.translation("–í–æ—Ç –≤–∞—à–∞ –æ–±–ª–æ–∂–∫–∞",lang))
    await state.update_data(Lang=lang)
