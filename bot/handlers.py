from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message,FSInputFile
from aiogram.filters import Command

from keyboards.main import keyboard_main
from modules.generateVocal import generateVocal
from models.ModelForm import Form
from models.ModelText2ImageAPI import Text2ImageAPI

from modules.generateImage import generateImage
from apiRequests.generateText import generateText
import os

router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª!üé§üéß", reply_markup=keyboard_main)

@router.message(lambda message: message.text == "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Çüé∂")
async def request_text(msg: Message, state: FSMContext):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç")

    await state.set_state(Form.waiting_for_text)

@router.message(Form.waiting_for_text)
async def generate(msg: Message, state: FSMContext):
    voice_file = await generateVocal(msg.text)
    await msg.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–Ø —Å–æ—á–∏–Ω—è—é*...‚öôÔ∏è‚öôÔ∏èÔ∏è‚öôÔ∏è",parse_mode="Markdown")
    await msg.answer_voice(voice=FSInputFile(voice_file),caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∫–∞–ª")
    await state.clear()

@router.message(lambda message: message.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—èüéπ")
async def request_text(msg: Message):
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç?", parse_mode="Markdown")
    @router.message()
    async def receive_text(msg: Message):
        text = msg.text
        genText = f'{generateText(text)}'
        await msg.answer(genText, parse_mode="Markdown")


@router.message(lambda message: message.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def request_text(msg: Message):
    await msg.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è*–ü–æ–≥–æ–¥–∏—Ç–µ*...*–Ø —Ç–≤–æ—Ä—é*...‚öôÔ∏è‚öôÔ∏èÔ∏è‚öôÔ∏è", parse_mode="Markdown")

    api_kandinsky = Text2ImageAPI('https://api-key.fusionbrain.ai/',
                                  api_key=os.getenv("api_key"),
                                  secret_key=os.getenv("secret_key"))
    model_id = api_kandinsky.get_model()
    prompt = api_kandinsky.generate("C–æ–∑–¥–∞–π –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–µ—Å–Ω–∏, –µ—ë –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞:", model_id)
    generated_images = api_kandinsky.check_generation(prompt)
    photos = await generateImage(generated_images, msg.from_user.username)
    if photos:
        await msg.answer_photo(photo=photos[0], caption="–í–æ—Ç –≤–∞—à–∞ –æ–±–ª–æ–∂–∫–∞")
